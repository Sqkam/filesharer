// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/file/v1/file.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListByIpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListByIpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByIpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByIpRequestMultiError, or nil if none found.
func (m *ListByIpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByIpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for Dir

	if len(errors) > 0 {
		return ListByIpRequestMultiError(errors)
	}

	return nil
}

// ListByIpRequestMultiError is an error wrapping multiple validation errors
// returned by ListByIpRequest.ValidateAll() if the designated constraints
// aren't met.
type ListByIpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByIpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByIpRequestMultiError) AllErrors() []error { return m }

// ListByIpRequestValidationError is the validation error returned by
// ListByIpRequest.Validate if the designated constraints aren't met.
type ListByIpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByIpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByIpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByIpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByIpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByIpRequestValidationError) ErrorName() string { return "ListByIpRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListByIpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByIpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByIpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByIpRequestValidationError{}

// Validate checks the field values on ListByIpReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListByIpReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByIpReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListByIpReplyMultiError, or
// nil if none found.
func (m *ListByIpReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByIpReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListByIpReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListByIpReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListByIpReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListByIpReplyMultiError(errors)
	}

	return nil
}

// ListByIpReplyMultiError is an error wrapping multiple validation errors
// returned by ListByIpReply.ValidateAll() if the designated constraints
// aren't met.
type ListByIpReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByIpReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByIpReplyMultiError) AllErrors() []error { return m }

// ListByIpReplyValidationError is the validation error returned by
// ListByIpReply.Validate if the designated constraints aren't met.
type ListByIpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByIpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByIpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByIpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByIpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByIpReplyValidationError) ErrorName() string { return "ListByIpReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListByIpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByIpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByIpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByIpReplyValidationError{}

// Validate checks the field values on GetDetailByIpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDetailByIpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDetailByIpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDetailByIpRequestMultiError, or nil if none found.
func (m *GetDetailByIpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDetailByIpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for FileName

	if len(errors) > 0 {
		return GetDetailByIpRequestMultiError(errors)
	}

	return nil
}

// GetDetailByIpRequestMultiError is an error wrapping multiple validation
// errors returned by GetDetailByIpRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDetailByIpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDetailByIpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDetailByIpRequestMultiError) AllErrors() []error { return m }

// GetDetailByIpRequestValidationError is the validation error returned by
// GetDetailByIpRequest.Validate if the designated constraints aren't met.
type GetDetailByIpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDetailByIpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDetailByIpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDetailByIpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDetailByIpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDetailByIpRequestValidationError) ErrorName() string {
	return "GetDetailByIpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDetailByIpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDetailByIpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDetailByIpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDetailByIpRequestValidationError{}

// Validate checks the field values on GetDetailByIpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDetailByIpReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDetailByIpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDetailByIpReplyMultiError, or nil if none found.
func (m *GetDetailByIpReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDetailByIpReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for Size

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetDetailByIpReplyMultiError(errors)
	}

	return nil
}

// GetDetailByIpReplyMultiError is an error wrapping multiple validation errors
// returned by GetDetailByIpReply.ValidateAll() if the designated constraints
// aren't met.
type GetDetailByIpReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDetailByIpReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDetailByIpReplyMultiError) AllErrors() []error { return m }

// GetDetailByIpReplyValidationError is the validation error returned by
// GetDetailByIpReply.Validate if the designated constraints aren't met.
type GetDetailByIpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDetailByIpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDetailByIpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDetailByIpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDetailByIpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDetailByIpReplyValidationError) ErrorName() string {
	return "GetDetailByIpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDetailByIpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDetailByIpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDetailByIpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDetailByIpReplyValidationError{}

// Validate checks the field values on DownloadByIpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadByIpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadByIpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadByIpRequestMultiError, or nil if none found.
func (m *DownloadByIpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadByIpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for FileName

	if len(errors) > 0 {
		return DownloadByIpRequestMultiError(errors)
	}

	return nil
}

// DownloadByIpRequestMultiError is an error wrapping multiple validation
// errors returned by DownloadByIpRequest.ValidateAll() if the designated
// constraints aren't met.
type DownloadByIpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadByIpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadByIpRequestMultiError) AllErrors() []error { return m }

// DownloadByIpRequestValidationError is the validation error returned by
// DownloadByIpRequest.Validate if the designated constraints aren't met.
type DownloadByIpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadByIpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadByIpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadByIpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadByIpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadByIpRequestValidationError) ErrorName() string {
	return "DownloadByIpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadByIpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadByIpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadByIpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadByIpRequestValidationError{}

// Validate checks the field values on DownloadByIpReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DownloadByIpReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadByIpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadByIpReplyMultiError, or nil if none found.
func (m *DownloadByIpReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadByIpReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DownloadByIpReplyMultiError(errors)
	}

	return nil
}

// DownloadByIpReplyMultiError is an error wrapping multiple validation errors
// returned by DownloadByIpReply.ValidateAll() if the designated constraints
// aren't met.
type DownloadByIpReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadByIpReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadByIpReplyMultiError) AllErrors() []error { return m }

// DownloadByIpReplyValidationError is the validation error returned by
// DownloadByIpReply.Validate if the designated constraints aren't met.
type DownloadByIpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadByIpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadByIpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadByIpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadByIpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadByIpReplyValidationError) ErrorName() string {
	return "DownloadByIpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadByIpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadByIpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadByIpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadByIpReplyValidationError{}

// Validate checks the field values on DownloadDirByIpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadDirByIpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadDirByIpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadDirByIpRequestMultiError, or nil if none found.
func (m *DownloadDirByIpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadDirByIpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for FileName

	if len(errors) > 0 {
		return DownloadDirByIpRequestMultiError(errors)
	}

	return nil
}

// DownloadDirByIpRequestMultiError is an error wrapping multiple validation
// errors returned by DownloadDirByIpRequest.ValidateAll() if the designated
// constraints aren't met.
type DownloadDirByIpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadDirByIpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadDirByIpRequestMultiError) AllErrors() []error { return m }

// DownloadDirByIpRequestValidationError is the validation error returned by
// DownloadDirByIpRequest.Validate if the designated constraints aren't met.
type DownloadDirByIpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadDirByIpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadDirByIpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadDirByIpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadDirByIpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadDirByIpRequestValidationError) ErrorName() string {
	return "DownloadDirByIpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadDirByIpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadDirByIpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadDirByIpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadDirByIpRequestValidationError{}

// Validate checks the field values on DownloadDirByIpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadDirByIpReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadDirByIpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadDirByIpReplyMultiError, or nil if none found.
func (m *DownloadDirByIpReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadDirByIpReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DownloadDirByIpReplyMultiError(errors)
	}

	return nil
}

// DownloadDirByIpReplyMultiError is an error wrapping multiple validation
// errors returned by DownloadDirByIpReply.ValidateAll() if the designated
// constraints aren't met.
type DownloadDirByIpReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadDirByIpReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadDirByIpReplyMultiError) AllErrors() []error { return m }

// DownloadDirByIpReplyValidationError is the validation error returned by
// DownloadDirByIpReply.Validate if the designated constraints aren't met.
type DownloadDirByIpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadDirByIpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadDirByIpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadDirByIpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadDirByIpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadDirByIpReplyValidationError) ErrorName() string {
	return "DownloadDirByIpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadDirByIpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadDirByIpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadDirByIpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadDirByIpReplyValidationError{}

// Validate checks the field values on ListNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodeRequestMultiError, or nil if none found.
func (m *ListNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNodeRequestMultiError(errors)
	}

	return nil
}

// ListNodeRequestMultiError is an error wrapping multiple validation errors
// returned by ListNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodeRequestMultiError) AllErrors() []error { return m }

// ListNodeRequestValidationError is the validation error returned by
// ListNodeRequest.Validate if the designated constraints aren't met.
type ListNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeRequestValidationError) ErrorName() string { return "ListNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeRequestValidationError{}

// Validate checks the field values on ListNodeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListNodeReplyMultiError, or
// nil if none found.
func (m *ListNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodeReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNodeReplyMultiError(errors)
	}

	return nil
}

// ListNodeReplyMultiError is an error wrapping multiple validation errors
// returned by ListNodeReply.ValidateAll() if the designated constraints
// aren't met.
type ListNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodeReplyMultiError) AllErrors() []error { return m }

// ListNodeReplyValidationError is the validation error returned by
// ListNodeReply.Validate if the designated constraints aren't met.
type ListNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeReplyValidationError) ErrorName() string { return "ListNodeReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeReplyValidationError{}

// Validate checks the field values on ListByIpReplyItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListByIpReplyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByIpReplyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByIpReplyItemMultiError, or nil if none found.
func (m *ListByIpReplyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByIpReplyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for IsDir

	if len(errors) > 0 {
		return ListByIpReplyItemMultiError(errors)
	}

	return nil
}

// ListByIpReplyItemMultiError is an error wrapping multiple validation errors
// returned by ListByIpReplyItem.ValidateAll() if the designated constraints
// aren't met.
type ListByIpReplyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByIpReplyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByIpReplyItemMultiError) AllErrors() []error { return m }

// ListByIpReplyItemValidationError is the validation error returned by
// ListByIpReplyItem.Validate if the designated constraints aren't met.
type ListByIpReplyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByIpReplyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByIpReplyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByIpReplyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByIpReplyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByIpReplyItemValidationError) ErrorName() string {
	return "ListByIpReplyItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListByIpReplyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByIpReplyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByIpReplyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByIpReplyItemValidationError{}

// Validate checks the field values on ListNodeReplyItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodeReplyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodeReplyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodeReplyItemMultiError, or nil if none found.
func (m *ListNodeReplyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodeReplyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hostname

	// no validation rules for Ip

	if len(errors) > 0 {
		return ListNodeReplyItemMultiError(errors)
	}

	return nil
}

// ListNodeReplyItemMultiError is an error wrapping multiple validation errors
// returned by ListNodeReplyItem.ValidateAll() if the designated constraints
// aren't met.
type ListNodeReplyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodeReplyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodeReplyItemMultiError) AllErrors() []error { return m }

// ListNodeReplyItemValidationError is the validation error returned by
// ListNodeReplyItem.Validate if the designated constraints aren't met.
type ListNodeReplyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeReplyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeReplyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeReplyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeReplyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeReplyItemValidationError) ErrorName() string {
	return "ListNodeReplyItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodeReplyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeReplyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeReplyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeReplyItemValidationError{}
