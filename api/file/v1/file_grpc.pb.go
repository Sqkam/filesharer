// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: file/v1/file.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	File_ListByIp_FullMethodName        = "/api.file.v1.File/ListByIp"
	File_GetDetailByIp_FullMethodName   = "/api.file.v1.File/GetDetailByIp"
	File_DownloadByIp_FullMethodName    = "/api.file.v1.File/DownloadByIp"
	File_DownloadDirByIp_FullMethodName = "/api.file.v1.File/DownloadDirByIp"
	File_ListNode_FullMethodName        = "/api.file.v1.File/ListNode"
)

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	ListByIp(ctx context.Context, in *ListByIpRequest, opts ...grpc.CallOption) (*ListByIpReply, error)
	GetDetailByIp(ctx context.Context, in *GetDetailByIpRequest, opts ...grpc.CallOption) (*GetDetailByIpReply, error)
	DownloadByIp(ctx context.Context, in *DownloadByIpRequest, opts ...grpc.CallOption) (*DownloadByIpReply, error)
	DownloadDirByIp(ctx context.Context, in *DownloadDirByIpRequest, opts ...grpc.CallOption) (*DownloadDirByIpReply, error)
	ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeReply, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) ListByIp(ctx context.Context, in *ListByIpRequest, opts ...grpc.CallOption) (*ListByIpReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListByIpReply)
	err := c.cc.Invoke(ctx, File_ListByIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetDetailByIp(ctx context.Context, in *GetDetailByIpRequest, opts ...grpc.CallOption) (*GetDetailByIpReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailByIpReply)
	err := c.cc.Invoke(ctx, File_GetDetailByIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DownloadByIp(ctx context.Context, in *DownloadByIpRequest, opts ...grpc.CallOption) (*DownloadByIpReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadByIpReply)
	err := c.cc.Invoke(ctx, File_DownloadByIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DownloadDirByIp(ctx context.Context, in *DownloadDirByIpRequest, opts ...grpc.CallOption) (*DownloadDirByIpReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadDirByIpReply)
	err := c.cc.Invoke(ctx, File_DownloadDirByIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodeReply)
	err := c.cc.Invoke(ctx, File_ListNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility.
type FileServer interface {
	ListByIp(context.Context, *ListByIpRequest) (*ListByIpReply, error)
	GetDetailByIp(context.Context, *GetDetailByIpRequest) (*GetDetailByIpReply, error)
	DownloadByIp(context.Context, *DownloadByIpRequest) (*DownloadByIpReply, error)
	DownloadDirByIp(context.Context, *DownloadDirByIpRequest) (*DownloadDirByIpReply, error)
	ListNode(context.Context, *ListNodeRequest) (*ListNodeReply, error)
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServer struct{}

func (UnimplementedFileServer) ListByIp(context.Context, *ListByIpRequest) (*ListByIpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIp not implemented")
}
func (UnimplementedFileServer) GetDetailByIp(context.Context, *GetDetailByIpRequest) (*GetDetailByIpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailByIp not implemented")
}
func (UnimplementedFileServer) DownloadByIp(context.Context, *DownloadByIpRequest) (*DownloadByIpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadByIp not implemented")
}
func (UnimplementedFileServer) DownloadDirByIp(context.Context, *DownloadDirByIpRequest) (*DownloadDirByIpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDirByIp not implemented")
}
func (UnimplementedFileServer) ListNode(context.Context, *ListNodeRequest) (*ListNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}
func (UnimplementedFileServer) testEmbeddedByValue()              {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	// If the following call pancis, it indicates UnimplementedFileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_ListByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).ListByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_ListByIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).ListByIp(ctx, req.(*ListByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetDetailByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetDetailByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_GetDetailByIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetDetailByIp(ctx, req.(*GetDetailByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DownloadByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DownloadByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DownloadByIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DownloadByIp(ctx, req.(*DownloadByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DownloadDirByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDirByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DownloadDirByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DownloadDirByIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DownloadDirByIp(ctx, req.(*DownloadDirByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_ListNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).ListNode(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.file.v1.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByIp",
			Handler:    _File_ListByIp_Handler,
		},
		{
			MethodName: "GetDetailByIp",
			Handler:    _File_GetDetailByIp_Handler,
		},
		{
			MethodName: "DownloadByIp",
			Handler:    _File_DownloadByIp_Handler,
		},
		{
			MethodName: "DownloadDirByIp",
			Handler:    _File_DownloadDirByIp_Handler,
		},
		{
			MethodName: "ListNode",
			Handler:    _File_ListNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/v1/file.proto",
}
